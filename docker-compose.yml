name: artichat

services:
  # 1. Backend: REST API with RabbitMQ producer
  backend:
    build: ./services/backend
    image: artichat-backend
    container_name: artichat-python-backend
    restart: unless-stopped
    command: poetry run uvicorn app.main:app --host 0.0.0.0 --port 8082
    env_file:
      - .env
    ports:
      - "9080:8082"
    environment:
      - API_KEY=${API_KEY:-your-api-key-here}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_URL=redis://artichat-redis:6379
      - CHROMA_HOST=http://chroma:8000
      - RABBITMQ_URL=amqp://rabbituser:${RABBITMQ_PASSWORD}@rabbitmq:5672/
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      artichat-redis: { condition: service_healthy }
      chroma: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
      ingestion-worker: { condition: service_healthy }
    networks:
      - app-network

  # 2. Python NLP Worker
  ingestion-worker:
    build: ./services/worker
    image: artichat-worker
    container_name: artichat-worker
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "9101:8000"
    environment:
      - CHROMA_HOST=http://chroma:8000
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - RABBITMQ_URI=amqp://rabbituser:${RABBITMQ_PASSWORD}@rabbitmq:5672/
      - REDIS_URL=redis://artichat-redis:6379/0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      chroma: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
      artichat-redis: { condition: service_healthy }
    networks:
      - app-network

  # 3. Redis for Artichat
  artichat-redis:
    image: redis:7.2-alpine
    container_name: artichat-redis
    restart: unless-stopped
    ports: ["6379:6379"]
    volumes:
      - redis-data:/data
      - ./configs/redis.conf:/etc/redis/redis.conf:ro
    command: redis-server /etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [app-network]

  # 4. ChromaDB
  chroma:
    image: chromadb/chroma:0.5.23
    container_name: artichat-chroma
    restart: unless-stopped
    # FIX: Changed host port from 8001 to 8100 to resolve conflict.
    ports: ["8100:8000"]
    volumes: [chroma-data:/chroma/.chroma/index]
    environment:
      - CHROMA_SERVER_CORS_ALLOW_ORIGINS=["https://chroma-ui.vercel.app"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      start_period: 10s
      timeout: 10s
      retries: 3
    networks: [app-network]

  # 5. RabbitMQ
  rabbitmq:
    image: rabbitmq:4.1.4-management-alpine
    container_name: artichat-rabbitmq
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=rabbituser
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-defaultpassword}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks: [app-network]

  # --- Langfuse Services ---

  langfuse-worker:
    image: docker.io/langfuse/langfuse-worker:3
    restart: always
    depends_on: &langfuse-depends-on
      postgres: { condition: service_healthy }
      minio: { condition: service_healthy }
      langfuse-redis: { condition: service_healthy }
      clickhouse: { condition: service_healthy }
    ports:
      - "127.0.0.1:3030:3030"
    environment: &langfuse-worker-env
      NEXTAUTH_URL: http://localhost:3000
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/postgres
      SALT: "mysalt" # CHANGEME
      ENCRYPTION_KEY: "0000000000000000000000000000000000000000000000000000000000000000" # CHANGEME
      CLICKHOUSE_MIGRATION_URL: ${CLICKHOUSE_MIGRATION_URL:-clickhouse://clickhouse:9000}
      CLICKHOUSE_URL: ${CLICKHOUSE_URL:-http://clickhouse:8123}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-clickhouse}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-clickhouse} # CHANGEME
      CLICKHOUSE_CLUSTER_ENABLED: "false"
      LANGFUSE_S3_EVENT_UPLOAD_BUCKET: ${LANGFUSE_S3_EVENT_UPLOAD_BUCKET:-langfuse}
      LANGFUSE_S3_EVENT_UPLOAD_REGION: ${LANGFUSE_S3_EVENT_UPLOAD_REGION:-auto}
      LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID: ${LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID:-minio}
      LANGFUSE_S3_EVENT_UPLOAD_SECRET_ACCESS_KEY: ${LANGFUSE_S3_EVENT_UPLOAD_SECRET_ACCESS_KEY:-miniosecret} # CHANGEME
      LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT: ${LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT:-http://minio:9000}
      LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE: ${LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE:-true}
      REDIS_HOST: ${REDIS_HOST:-langfuse-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_AUTH: ${REDIS_AUTH:-myredissecret} # CHANGEME
    networks: [app-network]

  langfuse-web:
    image: docker.io/langfuse/langfuse:3
    restart: always
    depends_on: *langfuse-depends-on
    ports:
      - "3000:3000"
    environment:
      <<: *langfuse-worker-env
      NEXTAUTH_SECRET: mysecret # CHANGEME
    networks: [app-network]

  clickhouse:
    image: docker.io/clickhouse/clickhouse-server
    restart: always
    user: "101:101"
    environment:
      CLICKHOUSE_DB: default
      CLICKHOUSE_USER: clickhouse
      CLICKHOUSE_PASSWORD: clickhouse # CHANGEME
    volumes:
      - langfuse_clickhouse_data:/var/lib/clickhouse
      - langfuse_clickhouse_logs:/var/log/clickhouse-server
    ports:
      - "127.0.0.1:8123:8123"
      - "127.0.0.1:9123:9000"
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8123/ping || exit 1
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 1s
    networks: [app-network]

  minio:
    image: docker.io/minio/minio
    restart: always
    entrypoint: sh
    command: -c 'mkdir -p /data/langfuse && minio server --address ":9000" --console-address ":9001" /data'
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: miniosecret
    ports:
      - "9090:9000"
      - "127.0.0.1:9091:9001"
    volumes:
      - langfuse_minio_data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 1s
      timeout: 5s
      retries: 5
      start_period: 1s
    networks: [app-network]

  langfuse-redis:
    image: docker.io/redis:7
    container_name: langfuse-redis
    restart: always
    command: ["redis-server", "--requirepass", "${REDIS_AUTH:-myredissecret}"]
    ports:
      - "127.0.0.1:6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_AUTH:-myredissecret}", "ping"]
      interval: 3s
      timeout: 10s
      retries: 10
    networks: [app-network]

  postgres:
    image: docker.io/postgres:${POSTGRES_VERSION:-latest}
    container_name: langfuse-postgres
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 3s
      retries: 10
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres # CHANGEME
      POSTGRES_DB: postgres
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - langfuse_postgres_data:/var/lib/postgresql/data
    networks: [app-network]

networks:
  app-network:
    driver: bridge

volumes:
  redis-data:
  chroma-data:
  rabbitmq-data:
  langfuse_postgres_data:
    driver: local
  langfuse_clickhouse_data:
    driver: local
  langfuse_clickhouse_logs:
    driver: local
  langfuse_minio_data:
    driver: local
